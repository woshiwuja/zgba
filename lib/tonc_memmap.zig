pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const uint = c_uint;
pub const eint = c_uint;
pub const ushort = c_ushort;
pub const eshort = c_ushort;
pub const @"u8" = u8;
pub const byte = u8;
pub const uchar = u8;
pub const echar = u8;
pub const @"u16" = u16;
pub const hword = u16;
pub const @"u32" = u32;
pub const word = u32;
pub const @"u64" = u64;
pub const s8 = i8;
pub const s16 = i16;
pub const s32 = i32;
pub const s64 = i64;
pub const vu8 = @"u8";
pub const vu16 = @"u16";
pub const vu32 = @"u32";
pub const vu64 = @"u64";
pub const vs8 = s8;
pub const vs16 = s16;
pub const vs32 = s32;
pub const vs64 = s64;
pub const cu8 = @"u8";
pub const cu16 = @"u16";
pub const cu32 = @"u32";
pub const cu64 = @"u64";
pub const cs8 = s8;
pub const cs16 = s16;
pub const cs32 = s32;
pub const cs64 = s64;
pub const BLOCK = extern struct {
    data: [8]@"u32" = @import("std").mem.zeroes([8]@"u32"),
};
pub const CSTR = [*c]const u8;
pub const FIXED = s32;
pub const COLOR = @"u16";
pub const SCR_ENTRY = @"u16";
pub const SE = @"u16";
pub const SCR_AFF_ENTRY = @"u8";
pub const SAE = @"u8";
pub const TILE = extern struct {
    data: [8]@"u32" = @import("std").mem.zeroes([8]@"u32"),
};
pub const TILE4 = TILE;
pub const TILE8 = extern struct {
    data: [16]@"u32" = @import("std").mem.zeroes([16]@"u32"),
};
pub const BOOL = @"u8";
pub const fnptr = ?*const fn () callconv(.c) void;
pub const fn_v_i = ?*const fn (c_int) callconv(.c) void;
pub const fn_i_i = ?*const fn (c_int) callconv(.c) c_int;
pub const struct_AFF_SRC = extern struct {
    sx: s16 = @import("std").mem.zeroes(s16),
    sy: s16 = @import("std").mem.zeroes(s16),
    alpha: @"u16" = @import("std").mem.zeroes(@"u16"),
};
pub const AFF_SRC = struct_AFF_SRC;
pub const ObjAffineSource = struct_AFF_SRC;
pub const struct_AFF_SRC_EX = extern struct {
    tex_x: s32 = @import("std").mem.zeroes(s32),
    tex_y: s32 = @import("std").mem.zeroes(s32),
    scr_x: s16 = @import("std").mem.zeroes(s16),
    scr_y: s16 = @import("std").mem.zeroes(s16),
    sx: s16 = @import("std").mem.zeroes(s16),
    sy: s16 = @import("std").mem.zeroes(s16),
    alpha: @"u16" = @import("std").mem.zeroes(@"u16"),
};
pub const AFF_SRC_EX = struct_AFF_SRC_EX;
pub const BgAffineSource = struct_AFF_SRC_EX;
pub const struct_AFF_DST = extern struct {
    pa: s16 = @import("std").mem.zeroes(s16),
    pb: s16 = @import("std").mem.zeroes(s16),
    pc: s16 = @import("std").mem.zeroes(s16),
    pd: s16 = @import("std").mem.zeroes(s16),
};
pub const AFF_DST = struct_AFF_DST;
pub const ObjAffineDest = struct_AFF_DST;
pub const struct_AFF_DST_EX = extern struct {
    pa: s16 = @import("std").mem.zeroes(s16),
    pb: s16 = @import("std").mem.zeroes(s16),
    pc: s16 = @import("std").mem.zeroes(s16),
    pd: s16 = @import("std").mem.zeroes(s16),
    dx: s32 = @import("std").mem.zeroes(s32),
    dy: s32 = @import("std").mem.zeroes(s32),
};
pub const AFF_DST_EX = struct_AFF_DST_EX;
pub const BgAffineDest = struct_AFF_DST_EX;
pub const struct_POINT16 = extern struct {
    x: s16 = @import("std").mem.zeroes(s16),
    y: s16 = @import("std").mem.zeroes(s16),
};
pub const POINT16 = struct_POINT16;
pub const BG_POINT = struct_POINT16;
pub const BG_AFFINE = struct_AFF_DST_EX;
pub const struct_DMA_REC = extern struct {
    src: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dst: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cnt: @"u32" = @import("std").mem.zeroes(@"u32"),
};
pub const DMA_REC = struct_DMA_REC;
const union_unnamed_1 = extern union {
    start: @"u16" align(1),
    count: @"u16" align(1),
};
pub const struct_TMR_REC = extern struct {
    unnamed_0: union_unnamed_1 = @import("std").mem.zeroes(union_unnamed_1),
    cnt: @"u16" = @import("std").mem.zeroes(@"u16"),
};
pub const TMR_REC = struct_TMR_REC;
pub const PALBANK = [16]COLOR;
pub const SCREENLINE = [32]SCR_ENTRY;
pub const SCREENMAT = [32][32]SCR_ENTRY;
pub const SCREENBLOCK = [1024]SCR_ENTRY;
pub const M3LINE = [240]COLOR;
pub const M4LINE = [240]@"u8";
pub const M5LINE = [160]COLOR;
pub const CHARBLOCK = [512]TILE;
pub const CHARBLOCK8 = [256]TILE8;
pub const struct_OBJ_ATTR = extern struct {
    attr0: @"u16" = @import("std").mem.zeroes(@"u16"),
    attr1: @"u16" = @import("std").mem.zeroes(@"u16"),
    attr2: @"u16" = @import("std").mem.zeroes(@"u16"),
    fill: s16 = @import("std").mem.zeroes(s16),
};
pub const OBJ_ATTR = struct_OBJ_ATTR;
pub const struct_OBJ_AFFINE = extern struct {
    fill0: [3]@"u16" = @import("std").mem.zeroes([3]@"u16"),
    pa: s16 = @import("std").mem.zeroes(s16),
    fill1: [3]@"u16" = @import("std").mem.zeroes([3]@"u16"),
    pb: s16 = @import("std").mem.zeroes(s16),
    fill2: [3]@"u16" = @import("std").mem.zeroes([3]@"u16"),
    pc: s16 = @import("std").mem.zeroes(s16),
    fill3: [3]@"u16" = @import("std").mem.zeroes([3]@"u16"),
    pd: s16 = @import("std").mem.zeroes(s16),
};
pub const OBJ_AFFINE = struct_OBJ_AFFINE;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap de1b01a8c1dddf75a560123ac1c2ab182b4830da)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap de1b01a8c1dddf75a560123ac1c2ab182b4830da)";
pub const __GXX_TYPEINFO_EQUALITY_INLINE = @as(c_int, 0);
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):203:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):225:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):233:9
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):365:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):366:9
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __WAITPKG__ = @as(c_int, 1);
pub const __MOVDIRI__ = @as(c_int, 1);
pub const __MOVDIR64B__ = @as(c_int, 1);
pub const __PTWRITE__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __HRESET__ = @as(c_int, 1);
pub const __AVXVNNI__ = @as(c_int, 1);
pub const __SERIALIZE__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// (no file):440:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):441:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):442:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):443:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):444:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):445:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):446:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):447:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):448:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):449:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):450:9
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _DEBUG = @as(c_int, 1);
pub const TONC_MEMMAP = "";
pub const TONC_TYPES = "";
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:291:9
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:328:9
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:330:9
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:875:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:876:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:877:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:878:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`");
// C:\Users\Gabusi_F\Desktop\zig0.14\zig-x86_64-windows-0.14.1\lib\include/stdint.h:879:9
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, @as(c_int, 0));
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const IWRAM_DATA = @compileError("unable to translate macro: undefined identifier `section`");
// .\libtonc\include/tonc_types.h:51:9
pub const EWRAM_DATA = @compileError("unable to translate macro: undefined identifier `section`");
// .\libtonc\include/tonc_types.h:54:9
pub const EWRAM_BSS = @compileError("unable to translate macro: undefined identifier `section`");
// .\libtonc\include/tonc_types.h:57:10
pub const IWRAM_CODE = @compileError("unable to translate macro: undefined identifier `section`");
// .\libtonc\include/tonc_types.h:60:9
pub const EWRAM_CODE = @compileError("unable to translate macro: undefined identifier `section`");
// .\libtonc\include/tonc_types.h:63:9
pub const ALIGN = @compileError("unable to translate macro: undefined identifier `aligned`");
// .\libtonc\include/tonc_types.h:66:9
pub const ALIGN4 = @compileError("unable to translate macro: undefined identifier `aligned`");
// .\libtonc\include/tonc_types.h:76:9
pub const PACKED = @compileError("unable to translate macro: undefined identifier `packed`");
// .\libtonc\include/tonc_types.h:82:9
pub const DEPRECATED = @compileError("unable to translate macro: undefined identifier `deprecated`");
// .\libtonc\include/tonc_types.h:88:9
pub const INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// .\libtonc\include/tonc_types.h:95:9
pub const TRUE = @as(c_int, 1);
pub const FALSE = @as(c_int, 0);
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const MEM_EWRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const MEM_IWRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03000000, .hex);
pub const MEM_IO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const MEM_PAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x05000000, .hex);
pub const MEM_VRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x06000000, .hex);
pub const MEM_OAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07000000, .hex);
pub const MEM_ROM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const MEM_SRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0E000000, .hex);
pub const EWRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000, .hex);
pub const IWRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000, .hex);
pub const PAL_SIZE = @as(c_int, 0x00400);
pub const VRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x18000, .hex);
pub const OAM_SIZE = @as(c_int, 0x00400);
pub const SRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hex);
pub const PAL_BG_SIZE = @as(c_int, 0x00200);
pub const PAL_OBJ_SIZE = @as(c_int, 0x00200);
pub const CBB_SIZE = @as(c_int, 0x04000);
pub const SBB_SIZE = @as(c_int, 0x00800);
pub const VRAM_BG_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hex);
pub const VRAM_OBJ_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000, .hex);
pub const M3_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x12C00, .hex);
pub const M4_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x09600, .hex);
pub const M5_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0A000, .hex);
pub const VRAM_PAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0A000, .hex);
pub const REG_BASE = MEM_IO;
pub const MEM_PAL_BG = MEM_PAL;
pub const MEM_PAL_OBJ = MEM_PAL + PAL_BG_SIZE;
pub const MEM_VRAM_FRONT = MEM_VRAM;
pub const MEM_VRAM_BACK = MEM_VRAM + VRAM_PAGE_SIZE;
pub const MEM_VRAM_OBJ = MEM_VRAM + VRAM_BG_SIZE;
pub const pal_bg_mem = @import("std").zig.c_translation.cast([*c]COLOR, MEM_PAL);
pub const pal_obj_mem = @import("std").zig.c_translation.cast([*c]COLOR, MEM_PAL_OBJ);
pub const pal_bg_bank = @import("std").zig.c_translation.cast([*c]PALBANK, MEM_PAL);
pub const pal_obj_bank = @import("std").zig.c_translation.cast([*c]PALBANK, MEM_PAL_OBJ);
pub const tile_mem = @import("std").zig.c_translation.cast([*c]CHARBLOCK, MEM_VRAM);
pub const tile8_mem = @import("std").zig.c_translation.cast([*c]CHARBLOCK8, MEM_VRAM);
pub const tile_mem_obj = @import("std").zig.c_translation.cast([*c]CHARBLOCK, MEM_VRAM_OBJ);
pub const tile8_mem_obj = @import("std").zig.c_translation.cast([*c]CHARBLOCK8, MEM_VRAM_OBJ);
pub const se_mem = @import("std").zig.c_translation.cast([*c]SCREENBLOCK, MEM_VRAM);
pub const se_mat = @import("std").zig.c_translation.cast([*c]SCREENMAT, MEM_VRAM);
pub const vid_mem = @import("std").zig.c_translation.cast([*c]COLOR, MEM_VRAM);
pub const m3_mem = @import("std").zig.c_translation.cast([*c]M3LINE, MEM_VRAM);
pub const m4_mem = @import("std").zig.c_translation.cast([*c]M4LINE, MEM_VRAM);
pub const m5_mem = @import("std").zig.c_translation.cast([*c]M5LINE, MEM_VRAM);
pub const vid_mem_front = @import("std").zig.c_translation.cast([*c]COLOR, MEM_VRAM);
pub const vid_mem_back = @import("std").zig.c_translation.cast([*c]COLOR, MEM_VRAM_BACK);
pub const m4_mem_back = @import("std").zig.c_translation.cast([*c]M4LINE, MEM_VRAM_BACK);
pub const m5_mem_back = @import("std").zig.c_translation.cast([*c]M5LINE, MEM_VRAM_BACK);
pub const oam_mem = @import("std").zig.c_translation.cast([*c]OBJ_ATTR, MEM_OAM);
pub const obj_mem = @import("std").zig.c_translation.cast([*c]OBJ_ATTR, MEM_OAM);
pub const obj_aff_mem = @import("std").zig.c_translation.cast([*c]OBJ_AFFINE, MEM_OAM);
pub const rom_mem = @import("std").zig.c_translation.cast([*c]@"u16", MEM_ROM);
pub const sram_mem = @import("std").zig.c_translation.cast([*c]@"u8", MEM_SRAM);
pub const REG_IFBIOS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE - @as(c_int, 0x0008)).*;
pub const REG_RESET_DST = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE - @as(c_int, 0x0006)).*;
pub const REG_ISR_MAIN = @import("std").zig.c_translation.cast([*c]fnptr, REG_BASE - @as(c_int, 0x0004)).*;
pub const REG_DISPCNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0000)).*;
pub const REG_DISPSTAT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0004)).*;
pub const REG_VCOUNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0006)).*;
pub const REG_BGCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0008));
pub const REG_BG0CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0008)).*;
pub const REG_BG1CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x000A)).*;
pub const REG_BG2CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x000C)).*;
pub const REG_BG3CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x000E)).*;
pub const REG_BG_OFS = @import("std").zig.c_translation.cast([*c]BG_POINT, REG_BASE + @as(c_int, 0x0010));
pub const REG_BG0HOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0010)).*;
pub const REG_BG0VOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0012)).*;
pub const REG_BG1HOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0014)).*;
pub const REG_BG1VOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0016)).*;
pub const REG_BG2HOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0018)).*;
pub const REG_BG2VOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x001A)).*;
pub const REG_BG3HOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x001C)).*;
pub const REG_BG3VOFS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x001E)).*;
pub const REG_BG_AFFINE = @import("std").zig.c_translation.cast([*c]BG_AFFINE, REG_BASE + @as(c_int, 0x0000));
pub const REG_BG2PA = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0020)).*;
pub const REG_BG2PB = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0022)).*;
pub const REG_BG2PC = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0024)).*;
pub const REG_BG2PD = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0026)).*;
pub const REG_BG2X = @import("std").zig.c_translation.cast([*c]vs32, REG_BASE + @as(c_int, 0x0028)).*;
pub const REG_BG2Y = @import("std").zig.c_translation.cast([*c]vs32, REG_BASE + @as(c_int, 0x002C)).*;
pub const REG_BG3PA = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0030)).*;
pub const REG_BG3PB = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0032)).*;
pub const REG_BG3PC = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0034)).*;
pub const REG_BG3PD = @import("std").zig.c_translation.cast([*c]vs16, REG_BASE + @as(c_int, 0x0036)).*;
pub const REG_BG3X = @import("std").zig.c_translation.cast([*c]vs32, REG_BASE + @as(c_int, 0x0038)).*;
pub const REG_BG3Y = @import("std").zig.c_translation.cast([*c]vs32, REG_BASE + @as(c_int, 0x003C)).*;
pub const REG_WIN0H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0040)).*;
pub const REG_WIN1H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0042)).*;
pub const REG_WIN0V = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0044)).*;
pub const REG_WIN1V = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0046)).*;
pub const REG_WININ = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0048)).*;
pub const REG_WINOUT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x004A)).*;
pub const REG_WIN0R = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0040)).*;
pub const REG_WIN0L = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0041)).*;
pub const REG_WIN1R = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0042)).*;
pub const REG_WIN1L = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0043)).*;
pub const REG_WIN0B = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0044)).*;
pub const REG_WIN0T = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0045)).*;
pub const REG_WIN1B = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0046)).*;
pub const REG_WIN1T = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0047)).*;
pub const REG_WIN0CNT = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0048)).*;
pub const REG_WIN1CNT = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x0049)).*;
pub const REG_WINOUTCNT = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x004A)).*;
pub const REG_WINOBJCNT = @import("std").zig.c_translation.cast([*c]vu8, REG_BASE + @as(c_int, 0x004B)).*;
pub const REG_MOSAIC = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x004C)).*;
pub const REG_BLDCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0050)).*;
pub const REG_BLDALPHA = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0052)).*;
pub const REG_BLDY = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0054)).*;
pub const REG_SND1SWEEP = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0060)).*;
pub const REG_SND1CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0062)).*;
pub const REG_SND1FREQ = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0064)).*;
pub const REG_SND2CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0068)).*;
pub const REG_SND2FREQ = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x006C)).*;
pub const REG_SND3SEL = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0070)).*;
pub const REG_SND3CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0072)).*;
pub const REG_SND3FREQ = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0074)).*;
pub const REG_SND4CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0078)).*;
pub const REG_SND4FREQ = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x007C)).*;
pub const REG_SNDCNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0080)).*;
pub const REG_SNDDMGCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0080)).*;
pub const REG_SNDDSCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0082)).*;
pub const REG_SNDSTAT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0084)).*;
pub const REG_SNDBIAS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0088)).*;
pub const REG_WAVE_RAM = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0090));
pub const REG_WAVE_RAM0 = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0090)).*;
pub const REG_WAVE_RAM1 = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0094)).*;
pub const REG_WAVE_RAM2 = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0098)).*;
pub const REG_WAVE_RAM3 = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x009C)).*;
pub const REG_FIFO_A = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00A0)).*;
pub const REG_FIFO_B = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00A4)).*;
pub const REG_DMA = @compileError("unable to translate C expr: unexpected token 'volatile'");
// .\libtonc\include\tonc_memmap.h:418:9
pub const REG_DMA0SAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00B0)).*;
pub const REG_DMA0DAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00B4)).*;
pub const REG_DMA0CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00B8)).*;
pub const REG_DMA1SAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00BC)).*;
pub const REG_DMA1DAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00C0)).*;
pub const REG_DMA1CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00C4)).*;
pub const REG_DMA2SAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00C8)).*;
pub const REG_DMA2DAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00CC)).*;
pub const REG_DMA2CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00D0)).*;
pub const REG_DMA3SAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00D4)).*;
pub const REG_DMA3DAD = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00D8)).*;
pub const REG_DMA3CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00DC)).*;
pub const REG_TM = @compileError("unable to translate C expr: unexpected token 'volatile'");
// .\libtonc\include\tonc_memmap.h:439:9
pub const REG_TM0D = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0100)).*;
pub const REG_TM0CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0102)).*;
pub const REG_TM1D = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0104)).*;
pub const REG_TM1CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0106)).*;
pub const REG_TM2D = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0108)).*;
pub const REG_TM2CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010A)).*;
pub const REG_TM3D = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010C)).*;
pub const REG_TM3CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010E)).*;
pub const REG_SIOCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0128)).*;
pub const REG_SIODATA = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0120));
pub const REG_SIODATA32 = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0120)).*;
pub const REG_SIODATA8 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x012A)).*;
pub const REG_SIOMULTI = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0120));
pub const REG_SIOMULTI0 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0120)).*;
pub const REG_SIOMULTI1 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0122)).*;
pub const REG_SIOMULTI2 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0124)).*;
pub const REG_SIOMULTI3 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0126)).*;
pub const REG_SIOMLT_RECV = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0120)).*;
pub const REG_SIOMLT_SEND = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x012A)).*;
pub const REG_KEYINPUT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0130)).*;
pub const REG_KEYCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0132)).*;
pub const REG_RCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0134)).*;
pub const REG_JOYCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0140)).*;
pub const REG_JOY_RECV = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0150)).*;
pub const REG_JOY_TRANS = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0154)).*;
pub const REG_JOYSTAT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0158)).*;
pub const REG_IE = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0200)).*;
pub const REG_IF = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0202)).*;
pub const REG_WAITCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0204)).*;
pub const REG_IME = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0208)).*;
pub const REG_PAUSE = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0300)).*;
pub const REG_BLDMOD = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0050)).*;
pub const REG_COLEV = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0052)).*;
pub const REG_COLEY = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0054)).*;
pub const REG_SOUND1CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0060)).*;
pub const REG_SOUND1CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0060)).*;
pub const REG_SOUND1CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0062)).*;
pub const REG_SOUND1CNT_X = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0064)).*;
pub const REG_SOUND2CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0068)).*;
pub const REG_SOUND2CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x006C)).*;
pub const REG_SOUND3CNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0070)).*;
pub const REG_SOUND3CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0070)).*;
pub const REG_SOUND3CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0072)).*;
pub const REG_SOUND3CNT_X = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0074)).*;
pub const REG_SOUND4CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0078)).*;
pub const REG_SOUND4CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x007C)).*;
pub const REG_SOUNDCNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0080)).*;
pub const REG_SOUNDCNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0080)).*;
pub const REG_SOUNDCNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0082)).*;
pub const REG_SOUNDCNT_X = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0084)).*;
pub const REG_SOUNDBIAS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0088)).*;
pub const REG_WAVE = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0090));
pub const REG_FIFOA = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00A0)).*;
pub const REG_FIFOB = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x00A4)).*;
pub const REG_DMA0CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00B8)).*;
pub const REG_DMA0CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00BA)).*;
pub const REG_DMA1CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00C4)).*;
pub const REG_DMA1CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00C6)).*;
pub const REG_DMA2CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00D0)).*;
pub const REG_DMA2CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00D2)).*;
pub const REG_DMA3CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00DC)).*;
pub const REG_DMA3CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x00DE)).*;
pub const REG_TM0CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0100)).*;
pub const REG_TM0CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0102)).*;
pub const REG_TM1CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0104)).*;
pub const REG_TM1CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0106)).*;
pub const REG_TM2CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0108)).*;
pub const REG_TM2CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010a)).*;
pub const REG_TM3CNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010c)).*;
pub const REG_TM3CNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x010e)).*;
pub const REG_KEYS = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0130)).*;
pub const REG_P1 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0130)).*;
pub const REG_P1CNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0132)).*;
pub const REG_SCD0 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0120)).*;
pub const REG_SCD1 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0122)).*;
pub const REG_SCD2 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0124)).*;
pub const REG_SCD3 = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0126)).*;
pub const REG_SCCNT = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0128)).*;
pub const REG_SCCNT_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0128)).*;
pub const REG_SCCNT_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x012A)).*;
pub const REG_R = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0134)).*;
pub const REG_HS_CTRL = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0140)).*;
pub const REG_JOYRE = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0150)).*;
pub const REG_JOYRE_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0150)).*;
pub const REG_JOYRE_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0152)).*;
pub const REG_JOYTR = @import("std").zig.c_translation.cast([*c]vu32, REG_BASE + @as(c_int, 0x0154)).*;
pub const REG_JOYTR_L = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0154)).*;
pub const REG_JOYTR_H = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0156)).*;
pub const REG_JSTAT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0158)).*;
pub const REG_WSCNT = @import("std").zig.c_translation.cast([*c]vu16, REG_BASE + @as(c_int, 0x0204)).*;
